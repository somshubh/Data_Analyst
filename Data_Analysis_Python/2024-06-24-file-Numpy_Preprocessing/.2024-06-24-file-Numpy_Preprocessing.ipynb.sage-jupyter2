{"backend_state":"ready","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-9a416170-eaed-4c7a-9cc0-ee7eae290da1.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"last_ipynb_save":1719639853282,"trust":true,"type":"settings"}
{"end":1719371685292,"exec_count":4,"id":"0741f9","input":"import numpy as np\n\nFile_Name_NAN = 'Lending-company-Numeric-NAN.csv'\n\nraw_data_NAN = np.genfromtxt(File_Name_NAN, \n           delimiter=';',\n           )\nprint(raw_data_NAN)","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"[[ 2000.    40.   365.  3121.  4241. 13621.]\n [ 2000.    40.   365.  3061.  4171. 15041.]\n [ 1000.    40.   365.  2160.  3280. 15340.]\n ...\n [   nan    40.   365.  4201.  5001. 16600.]\n [ 1000.    40.   365.  2080.  3320. 15600.]\n [ 2000.    40.   365.  4601.  4601. 16600.]]\n"}},"pos":1,"start":1719371685256,"state":"done","type":"cell"}
{"end":1719371685303,"exec_count":5,"id":"bb4140","input":"temp_fill = np.nanmax(raw_data_NAN).round(2) +1\ntemp_fill","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"64002.0"},"exec_count":5}},"pos":1.5,"start":1719371685299,"state":"done","type":"cell"}
{"end":1719371685367,"exec_count":6,"id":"e751d6","input":"import numpy as np\n\nFile_Name_NAN = 'Lending-company-Numeric-NAN.csv'\n\nraw_data_NAN_1 = np.genfromtxt(File_Name_NAN, \n           delimiter=';',\n           filling_values= temp_fill                   \n           )\nprint(raw_data_NAN_1)","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"[[2.0000e+03 4.0000e+01 3.6500e+02 3.1210e+03 4.2410e+03 1.3621e+04]\n [2.0000e+03 4.0000e+01 3.6500e+02 3.0610e+03 4.1710e+03 1.5041e+04]\n [1.0000e+03 4.0000e+01 3.6500e+02 2.1600e+03 3.2800e+03 1.5340e+04]\n ...\n [6.4002e+04 4.0000e+01 3.6500e+02 4.2010e+03 5.0010e+03 1.6600e+04]\n [1.0000e+03 4.0000e+01 3.6500e+02 2.0800e+03 3.3200e+03 1.5600e+04]\n [2.0000e+03 4.0000e+01 3.6500e+02 4.6010e+03 4.6010e+03 1.6600e+04]]\n"}},"pos":1.75,"start":1719371685365,"state":"done","type":"cell"}
{"end":1719371685465,"exec_count":7,"id":"c003f2","input":"np.isnan(raw_data_NAN).sum()","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"260"},"exec_count":7}},"pos":2,"start":1719371685464,"state":"done","type":"cell"}
{"end":1719371685566,"exec_count":8,"id":"38fb86","input":"np.set_printoptions(suppress=True)","kernel":"python3","no_halt":true,"pos":3,"start":1719371685564,"state":"done","type":"cell"}
{"end":1719371685860,"exec_count":9,"id":"5d8828","input":"for i in range(raw_data_NAN_1.shape[1]):\n    print(i, end = \" \")","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"0 1 2 3 4 5 "}},"pos":4,"start":1719371685859,"state":"done","type":"cell"}
{"end":1719371685873,"exec_count":10,"id":"50a954","input":"raw_data_NAN_1.shape[0]","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"1043"},"exec_count":10}},"pos":5,"start":1719371685865,"state":"done","type":"cell"}
{"end":1719371685953,"exec_count":11,"id":"b0a804","input":"Fill_1 = np.nanmean(raw_data_NAN_1, axis=0)\nFill_1[1].round(2)","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"2989.43"},"exec_count":11}},"pos":5.5,"start":1719371685879,"state":"done","type":"cell"}
{"end":1719371685960,"exec_count":12,"id":"fd57f9","input":"raw_data_NAN_1[:,0] = np.where(raw_data_NAN_1[:,0] == temp_fill,\n                              Fill_1[1].round(2),\n                              raw_data_NAN_1[:,0])","kernel":"python3","no_halt":true,"pos":6,"start":1719371685958,"state":"done","type":"cell"}
{"end":1719371685975,"exec_count":13,"id":"2616e8","input":"raw_data_NAN_1","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[ 2000.  ,    40.  ,   365.  ,  3121.  ,  4241.  , 13621.  ],\n       [ 2000.  ,    40.  ,   365.  ,  3061.  ,  4171.  , 15041.  ],\n       [ 1000.  ,    40.  ,   365.  ,  2160.  ,  3280.  , 15340.  ],\n       ...,\n       [ 2989.43,    40.  ,   365.  ,  4201.  ,  5001.  , 16600.  ],\n       [ 1000.  ,    40.  ,   365.  ,  2080.  ,  3320.  , 15600.  ],\n       [ 2000.  ,    40.  ,   365.  ,  4601.  ,  4601.  , 16600.  ]])"},"exec_count":13}},"pos":7,"start":1719371685965,"state":"done","type":"cell"}
{"end":1719371686056,"exec_count":14,"id":"3fc3de","input":"for i in range(raw_data_NAN_1.shape[1]):\n    raw_data_NAN_1[:,i] = np.where(raw_data_NAN_1[:,i] == temp_fill,\n                              Fill_1[i].round(2),\n                              raw_data_NAN_1[:,i])","kernel":"python3","no_halt":true,"pos":8,"start":1719371686054,"state":"done","type":"cell"}
{"end":1719371686067,"exec_count":15,"id":"6930c9","input":"raw_data_NAN_1","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[ 2000.  ,    40.  ,   365.  ,  3121.  ,  4241.  , 13621.  ],\n       [ 2000.  ,    40.  ,   365.  ,  3061.  ,  4171.  , 15041.  ],\n       [ 1000.  ,    40.  ,   365.  ,  2160.  ,  3280.  , 15340.  ],\n       ...,\n       [ 2989.43,    40.  ,   365.  ,  4201.  ,  5001.  , 16600.  ],\n       [ 1000.  ,    40.  ,   365.  ,  2080.  ,  3320.  , 15600.  ],\n       [ 2000.  ,    40.  ,   365.  ,  4601.  ,  4601.  , 16600.  ]])"},"exec_count":15}},"pos":9,"start":1719371686062,"state":"done","type":"cell"}
{"end":1719371686079,"exec_count":16,"id":"5c2af4","input":"raw_data_NAN_1.shape","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"(1043, 6)"},"exec_count":16}},"pos":10,"start":1719371686071,"state":"done","type":"cell"}
{"end":1719371686161,"exec_count":17,"id":"285104","input":"np.isnan(raw_data_NAN_1).sum()","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"0"},"exec_count":17}},"pos":11,"start":1719371686153,"state":"done","type":"cell"}
{"end":1719371686171,"exec_count":18,"id":"c2d0be","input":"np.reshape(raw_data_NAN_1,(6, 1043))","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[ 2000. ,    40. ,   365. , ...,   365. ,  1581. ,  3041. ],\n       [12277. ,  2000. ,    40. , ...,    50. ,   365. ,  5350. ],\n       [ 6850. , 15150. ,  1000. , ...,  2000. ,    40. ,  3537.7],\n       [ 3101. ,  4351. , 16600. , ..., 16600. ,  2000. ,    40. ],\n       [  365. ,  3441. ,  4661. , ...,  8450. , 22250. ,  2000. ],\n       [   40. ,   365. ,  3701. , ...,  4601. ,  4601. , 16600. ]])"},"exec_count":18}},"pos":12,"start":1719371686166,"state":"done","type":"cell"}
{"end":1719371686254,"exec_count":19,"id":"b84a46","input":"np.reshape(raw_data_NAN_1,(1,1,2, 3, 1043))","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[[[[ 2000. ,    40. ,   365. , ...,   365. ,  1581. ,  3041. ],\n          [12277. ,  2000. ,    40. , ...,    50. ,   365. ,  5350. ],\n          [ 6850. , 15150. ,  1000. , ...,  2000. ,    40. ,  3537.7]],\n\n         [[ 3101. ,  4351. , 16600. , ..., 16600. ,  2000. ,    40. ],\n          [  365. ,  3441. ,  4661. , ...,  8450. , 22250. ,  2000. ],\n          [   40. ,   365. ,  3701. , ...,  4601. ,  4601. , 16600. ]]]]])"},"exec_count":19}},"pos":13,"start":1719371686178,"state":"done","type":"cell"}
{"end":1719371686264,"exec_count":20,"id":"3f3744","input":"raw_data_NAN_1","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[ 2000.  ,    40.  ,   365.  ,  3121.  ,  4241.  , 13621.  ],\n       [ 2000.  ,    40.  ,   365.  ,  3061.  ,  4171.  , 15041.  ],\n       [ 1000.  ,    40.  ,   365.  ,  2160.  ,  3280.  , 15340.  ],\n       ...,\n       [ 2989.43,    40.  ,   365.  ,  4201.  ,  5001.  , 16600.  ],\n       [ 1000.  ,    40.  ,   365.  ,  2080.  ,  3320.  , 15600.  ],\n       [ 2000.  ,    40.  ,   365.  ,  4601.  ,  4601.  , 16600.  ]])"},"exec_count":20}},"pos":14,"start":1719371686260,"state":"done","type":"cell"}
{"end":1719371686273,"exec_count":21,"id":"c3735e","input":"np.delete(raw_data_NAN_1, [0,2,4], axis=1)","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[   40.,  3121., 13621.],\n       [   40.,  3061., 15041.],\n       [   40.,  2160., 15340.],\n       ...,\n       [   40.,  4201., 16600.],\n       [   40.,  2080., 15600.],\n       [   40.,  4601., 16600.]])"},"exec_count":21}},"pos":15,"start":1719371686270,"state":"done","type":"cell"}
{"end":1719371686285,"exec_count":22,"id":"9b5681","input":"raw_data_NAN_1[[0,3,7\n              ],:]","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[ 2000.,    40.,   365.,  3121.,  4241., 13621.],\n       [ 2000.,    40.,   365.,  3041.,  4241., 15321.],\n       [ 2000.,    40.,   365.,  3971.,  4131., 15351.]])"},"exec_count":22}},"pos":16,"start":1719371686282,"state":"done","type":"cell"}
{"end":1719371686361,"exec_count":23,"id":"1a078b","input":"#Sort_raw_data = raw_data_NAN_1.sort()\nnp.sort(raw_data_NAN_1, axis=None)","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([-2870., -2870., -2550., ..., 54625., 54625., 64001.])"},"exec_count":23}},"pos":17,"start":1719371686355,"state":"done","type":"cell"}
{"end":1719371686369,"exec_count":24,"id":"6ca2c7","input":"raw_data_NAN_1.shape","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"(1043, 6)"},"exec_count":24}},"pos":17.5,"start":1719371686365,"state":"done","type":"cell"}
{"end":1719371686463,"exec_count":25,"id":"35aeec","input":"np.sort(raw_data_NAN_1, axis = 0)","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[ 1000.  ,    35.  ,   365.  , -2870.  , -2870.  ,  -350.  ],\n       [ 1000.  ,    35.  ,   365.  , -2550.  , -2100.  ,  1100.  ],\n       [ 1000.  ,    35.  ,   365.  , -2450.  , -1750.  ,  1160.  ],\n       ...,\n       [ 9000.  ,  2989.43,  3537.7 , 16001.  , 18250.  , 54625.  ],\n       [ 9000.  ,  2989.43,  3537.7 , 16751.  , 18751.  , 54625.  ],\n       [ 9000.  ,  2989.43,  3537.7 , 17650.  , 20001.  , 64001.  ]])"},"exec_count":25}},"pos":18,"start":1719371686373,"state":"done","type":"cell"}
{"end":1719371686573,"exec_count":26,"id":"3d4c2f","input":"raw_data_NAN_1","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[ 2000.  ,    40.  ,   365.  ,  3121.  ,  4241.  , 13621.  ],\n       [ 2000.  ,    40.  ,   365.  ,  3061.  ,  4171.  , 15041.  ],\n       [ 1000.  ,    40.  ,   365.  ,  2160.  ,  3280.  , 15340.  ],\n       ...,\n       [ 2989.43,    40.  ,   365.  ,  4201.  ,  5001.  , 16600.  ],\n       [ 1000.  ,    40.  ,   365.  ,  2080.  ,  3320.  , 15600.  ],\n       [ 2000.  ,    40.  ,   365.  ,  4601.  ,  4601.  , 16600.  ]])"},"exec_count":26}},"pos":19,"start":1719371686568,"state":"done","type":"cell"}
{"end":1719371686663,"exec_count":27,"id":"e1cb06","input":"import numpy as np\n\nFile_Name_NAN = 'Lending-company-Numeric-NAN.csv'\n\nraw_data_NAN_1 = np.genfromtxt(File_Name_NAN, \n           delimiter=';',\n           filling_values= temp_fill                   \n           )\nprint(raw_data_NAN_1)","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"[[ 2000.    40.   365.  3121.  4241. 13621.]\n [ 2000.    40.   365.  3061.  4171. 15041.]\n [ 1000.    40.   365.  2160.  3280. 15340.]\n ...\n [64002.    40.   365.  4201.  5001. 16600.]\n [ 1000.    40.   365.  2080.  3320. 15600.]\n [ 2000.    40.   365.  4601.  4601. 16600.]]\n"}},"pos":20,"start":1719371686655,"state":"done","type":"cell"}
{"end":1719371686672,"exec_count":28,"id":"6c5393","input":"for i in range(raw_data_NAN_1.shape[1]):\n    raw_data_NAN_1[:,i] = np.where(raw_data_NAN_1[:,i] == temp_fill,\n                              Fill_1[i].round(2),\n                              raw_data_NAN_1[:,i])","kernel":"python3","no_halt":true,"pos":21,"start":1719371686671,"state":"done","type":"cell"}
{"end":1719371686680,"exec_count":29,"id":"ed3436","input":"np.sort(raw_data_NAN_1)","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[   40.  ,   365.  ,  2000.  ,  3121.  ,  4241.  , 13621.  ],\n       [   40.  ,   365.  ,  2000.  ,  3061.  ,  4171.  , 15041.  ],\n       [   40.  ,   365.  ,  1000.  ,  2160.  ,  3280.  , 15340.  ],\n       ...,\n       [   40.  ,   365.  ,  4201.  ,  4263.25,  5001.  , 16600.  ],\n       [   40.  ,   365.  ,  1000.  ,  2080.  ,  3320.  , 15600.  ],\n       [   40.  ,   365.  ,  2000.  ,  4601.  ,  4601.  , 16600.  ]])"},"exec_count":29}},"pos":22,"start":1719371686675,"state":"done","type":"cell"}
{"end":1719371686758,"exec_count":30,"id":"586904","input":"raw_data_NAN_1","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[ 2000.  ,    40.  ,   365.  ,  3121.  ,  4241.  , 13621.  ],\n       [ 2000.  ,    40.  ,   365.  ,  3061.  ,  4171.  , 15041.  ],\n       [ 1000.  ,    40.  ,   365.  ,  2160.  ,  3280.  , 15340.  ],\n       ...,\n       [ 4263.25,    40.  ,   365.  ,  4201.  ,  5001.  , 16600.  ],\n       [ 1000.  ,    40.  ,   365.  ,  2080.  ,  3320.  , 15600.  ],\n       [ 2000.  ,    40.  ,   365.  ,  4601.  ,  4601.  , 16600.  ]])"},"exec_count":30}},"pos":23,"start":1719371686683,"state":"done","type":"cell"}
{"end":1719371686768,"exec_count":31,"id":"98c882","input":"np.argsort(raw_data_NAN_1)","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[1, 2, 0, 3, 4, 5],\n       [1, 2, 0, 3, 4, 5],\n       [1, 2, 0, 3, 4, 5],\n       ...,\n       [1, 2, 3, 0, 4, 5],\n       [1, 2, 0, 3, 4, 5],\n       [1, 2, 0, 3, 4, 5]])"},"exec_count":31}},"pos":24,"start":1719371686765,"state":"done","type":"cell"}
{"end":1719371686778,"exec_count":32,"id":"88cf0e","input":"np.argsort(raw_data_NAN_1, axis=0)","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[ 166,  327,    0,   32,   32,  482],\n       [ 847,  443,  673,  166,  166,  166],\n       [ 846,  816,  674,   85,  448,   32],\n       ...,\n       [ 720,  812,  655, 1033,  718,  568],\n       [ 568,  455,  624,  568, 1019,  978],\n       [ 420,  733,  521,  718, 1033,   27]])"},"exec_count":32}},"pos":25,"start":1719371686773,"state":"done","type":"cell"}
{"end":1719371686860,"exec_count":33,"id":"f30c05","input":"raw_data_NAN_1[np.argsort(raw_data_NAN_1[:,\n                                        5])]","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[ 1000.  ,    50.  ,   365.  ,  7468.93,  -350.  ,  -350.  ],\n       [ 1000.  ,    50.  ,   365.  , -2550.  , -2100.  ,  1100.  ],\n       [ 1000.  ,    50.  ,   365.  , -2870.  , -2870.  ,  1160.  ],\n       ...,\n       [ 9000.  ,   125.  ,   365.  , 16751.  , 16751.  , 54625.  ],\n       [ 9000.  ,   125.  ,   365.  , 13001.  , 17001.  , 54625.  ],\n       [ 9000.  ,   165.  ,   365.  ,  7468.93, 16846.  , 64001.  ]])"},"exec_count":33}},"pos":26,"start":1719371686858,"state":"done","type":"cell"}
{"end":1719371686868,"exec_count":34,"id":"8ab4ba","input":"np.argsort(raw_data_NAN_1[:,5])","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([482, 166,  32, ..., 568, 978,  27])"},"exec_count":34}},"pos":27,"start":1719371686865,"state":"done","type":"cell"}
{"end":1719371686962,"exec_count":35,"id":"0b969a","input":"raw_data_NAN_1[482]","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([1000.  ,   50.  ,  365.  , 7468.93, -350.  , -350.  ])"},"exec_count":35}},"pos":28,"start":1719371686954,"state":"done","type":"cell"}
{"end":1719371686970,"exec_count":36,"id":"3e2a69","input":"np.argwhere(raw_data_NAN_1 == False)","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[116,   4],\n       [430,   3]])"},"exec_count":36}},"pos":29,"start":1719371686968,"state":"done","type":"cell"}
{"end":1719371686979,"exec_count":37,"id":"1fee83","input":"np.argwhere(np.isnan(raw_data_NAN_1))","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([], shape=(0, 2), dtype=int64)"},"exec_count":37}},"pos":30,"start":1719371686976,"state":"done","type":"cell"}
{"end":1719371687055,"exec_count":38,"id":"a92391","input":"np.isnan(raw_data_NAN_1).sum()","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"0"},"exec_count":38}},"pos":31,"start":1719371686983,"state":"done","type":"cell"}
{"end":1719371687069,"exec_count":39,"id":"e7a5c4","input":"import numpy as np\n\nFile_Name_NAN = 'Lending-company-Numeric-NAN.csv'\n\nraw_data_NAN_1 = np.genfromtxt(File_Name_NAN, \n           delimiter=';',\n                             \n           )\nprint(raw_data_NAN_1)","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"[[ 2000.    40.   365.  3121.  4241. 13621.]\n [ 2000.    40.   365.  3061.  4171. 15041.]\n [ 1000.    40.   365.  2160.  3280. 15340.]\n ...\n [   nan    40.   365.  4201.  5001. 16600.]\n [ 1000.    40.   365.  2080.  3320. 15600.]\n [ 2000.    40.   365.  4601.  4601. 16600.]]\n"}},"pos":32,"start":1719371687067,"state":"done","type":"cell"}
{"end":1719371687078,"exec_count":40,"id":"027d6a","input":"np.isnan(raw_data_NAN_1).sum()","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"260"},"exec_count":40}},"pos":33,"start":1719371687074,"state":"done","type":"cell"}
{"end":1719371687168,"exec_count":41,"id":"be0519","input":"np.argwhere(np.isnan(raw_data_NAN_1))","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[  11,    3],\n       [  15,    3],\n       [  27,    3],\n       [  58,    3],\n       [  60,    4],\n       [  85,    4],\n       [ 117,    5],\n       [ 152,    1],\n       [ 152,    2],\n       [ 152,    4],\n       [ 172,    1],\n       [ 175,    1],\n       [ 175,    2],\n       [ 176,    3],\n       [ 177,    4],\n       [ 178,    5],\n       [ 211,    3],\n       [ 229,    0],\n       [ 230,    1],\n       [ 237,    1],\n       [ 247,    3],\n       [ 251,    5],\n       [ 252,    4],\n       [ 258,    1],\n       [ 260,    3],\n       [ 262,    4],\n       [ 271,    5],\n       [ 272,    4],\n       [ 284,    2],\n       [ 284,    3],\n       [ 297,    1],\n       [ 297,    2],\n       [ 300,    3],\n       [ 315,    3],\n       [ 315,    5],\n       [ 327,    4],\n       [ 336,    4],\n       [ 343,    0],\n       [ 344,    2],\n       [ 346,    2],\n       [ 363,    3],\n       [ 375,    3],\n       [ 377,    2],\n       [ 398,    5],\n       [ 416,    4],\n       [ 428,    0],\n       [ 432,    1],\n       [ 433,    3],\n       [ 434,    2],\n       [ 440,    3],\n       [ 441,    1],\n       [ 446,    2],\n       [ 455,    1],\n       [ 456,    2],\n       [ 458,    2],\n       [ 461,    3],\n       [ 467,    4],\n       [ 468,    0],\n       [ 469,    3],\n       [ 470,    0],\n       [ 481,    1],\n       [ 482,    3],\n       [ 484,    4],\n       [ 489,    0],\n       [ 493,    5],\n       [ 499,    0],\n       [ 504,    3],\n       [ 506,    1],\n       [ 517,    4],\n       [ 518,    0],\n       [ 521,    2],\n       [ 530,    5],\n       [ 532,    3],\n       [ 534,    5],\n       [ 547,    3],\n       [ 549,    5],\n       [ 553,    5],\n       [ 554,    5],\n       [ 559,    3],\n       [ 566,    0],\n       [ 566,    1],\n       [ 566,    2],\n       [ 567,    0],\n       [ 567,    1],\n       [ 567,    2],\n       [ 581,    1],\n       [ 581,    2],\n       [ 582,    1],\n       [ 582,    2],\n       [ 583,    1],\n       [ 583,    2],\n       [ 593,    3],\n       [ 594,    3],\n       [ 595,    3],\n       [ 596,    3],\n       [ 609,    4],\n       [ 609,    5],\n       [ 610,    4],\n       [ 610,    5],\n       [ 611,    4],\n       [ 611,    5],\n       [ 612,    4],\n       [ 612,    5],\n       [ 623,    2],\n       [ 623,    3],\n       [ 624,    2],\n       [ 624,    3],\n       [ 625,    2],\n       [ 625,    3],\n       [ 626,    2],\n       [ 626,    3],\n       [ 627,    2],\n       [ 627,    3],\n       [ 636,    0],\n       [ 637,    0],\n       [ 637,    4],\n       [ 637,    5],\n       [ 638,    0],\n       [ 638,    4],\n       [ 638,    5],\n       [ 639,    4],\n       [ 639,    5],\n       [ 640,    4],\n       [ 640,    5],\n       [ 641,    4],\n       [ 641,    5],\n       [ 653,    1],\n       [ 653,    2],\n       [ 653,    3],\n       [ 653,    4],\n       [ 654,    1],\n       [ 654,    2],\n       [ 654,    3],\n       [ 654,    4],\n       [ 655,    1],\n       [ 655,    2],\n       [ 655,    3],\n       [ 655,    4],\n       [ 685,    2],\n       [ 686,    0],\n       [ 701,    4],\n       [ 704,    2],\n       [ 724,    1],\n       [ 724,    2],\n       [ 730,    1],\n       [ 730,    2],\n       [ 730,    3],\n       [ 731,    1],\n       [ 731,    2],\n       [ 731,    3],\n       [ 732,    1],\n       [ 732,    2],\n       [ 732,    3],\n       [ 733,    1],\n       [ 733,    2],\n       [ 733,    3],\n       [ 742,    4],\n       [ 747,    3],\n       [ 755,    1],\n       [ 758,    1],\n       [ 760,    1],\n       [ 764,    0],\n       [ 764,    1],\n       [ 764,    2],\n       [ 764,    3],\n       [ 764,    4],\n       [ 764,    5],\n       [ 765,    3],\n       [ 775,    1],\n       [ 775,    2],\n       [ 775,    3],\n       [ 776,    1],\n       [ 776,    2],\n       [ 776,    3],\n       [ 777,    1],\n       [ 777,    2],\n       [ 777,    3],\n       [ 778,    1],\n       [ 778,    2],\n       [ 778,    3],\n       [ 787,    4],\n       [ 788,    1],\n       [ 790,    2],\n       [ 794,    3],\n       [ 795,    5],\n       [ 796,    1],\n       [ 796,    4],\n       [ 800,    0],\n       [ 801,    1],\n       [ 802,    1],\n       [ 803,    2],\n       [ 805,    0],\n       [ 809,    0],\n       [ 810,    0],\n       [ 811,    0],\n       [ 812,    1],\n       [ 820,    0],\n       [ 820,    3],\n       [ 820,    4],\n       [ 822,    2],\n       [ 823,    2],\n       [ 825,    0],\n       [ 830,    1],\n       [ 830,    2],\n       [ 836,    3],\n       [ 837,    3],\n       [ 838,    3],\n       [ 839,    4],\n       [ 843,    2],\n       [ 856,    0],\n       [ 856,    1],\n       [ 856,    3],\n       [ 856,    4],\n       [ 856,    5],\n       [ 857,    0],\n       [ 858,    1],\n       [ 870,    0],\n       [ 870,    2],\n       [ 870,    3],\n       [ 872,    0],\n       [ 873,    0],\n       [ 874,    1],\n       [ 890,    1],\n       [ 890,    2],\n       [ 890,    3],\n       [ 909,    1],\n       [ 910,    0],\n       [ 912,    0],\n       [ 912,    2],\n       [ 912,    3],\n       [ 912,    4],\n       [ 928,    1],\n       [ 928,    2],\n       [ 928,    3],\n       [ 929,    1],\n       [ 929,    2],\n       [ 929,    3],\n       [ 930,    3],\n       [ 958,    2],\n       [ 959,    3],\n       [ 960,    3],\n       [1024,    0],\n       [1024,    2],\n       [1026,    2],\n       [1026,    4],\n       [1028,    0],\n       [1028,    3],\n       [1028,    4],\n       [1029,    0],\n       [1030,    1],\n       [1030,    5],\n       [1032,    0],\n       [1032,    5],\n       [1034,    3],\n       [1035,    4],\n       [1036,    2],\n       [1037,    1],\n       [1038,    4],\n       [1039,    3],\n       [1040,    0]])"},"exec_count":41}},"pos":34,"start":1719371687154,"state":"done","type":"cell"}
{"end":1719371687180,"exec_count":42,"id":"daf34d","input":"raw_data_NAN_1[152]","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([ 9000.,    nan,    nan, 12251.,    nan, 34514.])"},"exec_count":42}},"pos":35,"start":1719371687176,"state":"done","type":"cell"}
{"end":1719371687262,"exec_count":43,"id":"853a4d","input":"for index in np.argwhere(np.isnan(raw_data_NAN_1)):\n    raw_data_NAN_1[index[0], index[1]] = 0","kernel":"python3","no_halt":true,"pos":36,"start":1719371687254,"state":"done","type":"cell"}
{"end":1719371687271,"exec_count":44,"id":"03247c","input":"raw_data_NAN_1","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[ 2000.,    40.,   365.,  3121.,  4241., 13621.],\n       [ 2000.,    40.,   365.,  3061.,  4171., 15041.],\n       [ 1000.,    40.,   365.,  2160.,  3280., 15340.],\n       ...,\n       [    0.,    40.,   365.,  4201.,  5001., 16600.],\n       [ 1000.,    40.,   365.,  2080.,  3320., 15600.],\n       [ 2000.,    40.,   365.,  4601.,  4601., 16600.]])"},"exec_count":44}},"pos":37,"start":1719371687267,"state":"done","type":"cell"}
{"end":1719371687361,"exec_count":45,"id":"92e4df","input":"np.isnan(raw_data_NAN_1).sum()","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"0"},"exec_count":45}},"pos":38,"start":1719371687353,"state":"done","type":"cell"}
{"end":1719371687371,"exec_count":46,"id":"f61b28","input":"from numpy.random import shuffle as sf\nsf(raw_data_NAN_1)\nraw_data_NAN_1","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[ 1000.,    40.,   365.,  2540.,  3540., 15600.],\n       [ 2000.,    40.,   365.,  3761.,  4161., 10761.],\n       [ 4000.,    50.,   365.,     0.,  5240., 12910.],\n       ...,\n       [ 2000.,    50.,   365.,  4251.,  4951., 20250.],\n       [ 2000.,    40.,   365.,  3401.,  4601., 16600.],\n       [ 2000.,    50.,   365.,  3450.,     0., 20250.]])"},"exec_count":46}},"pos":39,"start":1719371687365,"state":"done","type":"cell"}
{"end":1719371687379,"exec_count":47,"id":"a5efaf","input":"(lambda x : x+1)(10)","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"11"},"exec_count":47}},"pos":40,"start":1719371687376,"state":"done","type":"cell"}
{"end":1719371687654,"exec_count":48,"id":"f984ea","input":"from numpy.random import Generator as gen\nfrom numpy.random import PCG64 as psg\n\narray_RG = gen(psg(seed = 365))\n#array_RG.integers(low = 2, high = 15, size=(5,5))\narray_RG.shuffle(raw_data_NAN_1)\nraw_data_NAN_1","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[ 2000.,    50.,   365.,  3500.,  5000., 20250.],\n       [ 1000.,    40.,   365.,  2200.,  3760., 15600.],\n       [ 2000.,    40.,   365.,  3401.,  4631., 12821.],\n       ...,\n       [ 1000.,    50.,   365.,   450.,  2050., 12000.],\n       [ 2000.,    40.,   365.,  3581.,  4631., 16271.],\n       [ 4000.,    50.,   365.,  5350.,  6500., 14400.]])"},"exec_count":48}},"pos":41,"start":1719371687567,"state":"done","type":"cell"}
{"end":1719371687668,"exec_count":49,"id":"200b86","input":"raw_data_NAN_1.astype(dtype = np.str).astype(dtype = np.float64).astype(dtype = np.int64)","kernel":"python3","no_halt":true,"output":{"0":{"name":"stderr","text":"/tmp/ipykernel_227/1697609751.py:1: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  raw_data_NAN_1.astype(dtype = np.str).astype(dtype = np.float64).astype(dtype = np.int64)\n"},"1":{"data":{"text/plain":"array([[ 2000,    50,   365,  3500,  5000, 20250],\n       [ 1000,    40,   365,  2200,  3760, 15600],\n       [ 2000,    40,   365,  3401,  4631, 12821],\n       ...,\n       [ 1000,    50,   365,   450,  2050, 12000],\n       [ 2000,    40,   365,  3581,  4631, 16271],\n       [ 4000,    50,   365,  5350,  6500, 14400]])"},"exec_count":49}},"pos":43,"start":1719371687663,"state":"done","type":"cell"}
{"end":1719371687676,"exec_count":50,"id":"b22dc0","input":"raw_data","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[ 2000.,    40.,   365.,  3121.,  4241., 13621.],\n       [ 2000.,    40.,   365.,  3061.,  4171., 15041.],\n       [ 1000.,    40.,   365.,  2160.,  3280., 15340.],\n       ...,\n       [ 2000.,    40.,   365.,  4201.,  5001., 16600.],\n       [ 1000.,    40.,   365.,  2080.,  3320., 15600.],\n       [ 2000.,    40.,   365.,  4601.,  4601., 16600.]])"},"exec_count":50}},"pos":44,"start":1719371687672,"state":"done","type":"cell"}
{"end":1719371687761,"exec_count":51,"id":"764590","input":"raw_data_NAN_1","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[ 2000.,    50.,   365.,  3500.,  5000., 20250.],\n       [ 1000.,    40.,   365.,  2200.,  3760., 15600.],\n       [ 2000.,    40.,   365.,  3401.,  4631., 12821.],\n       ...,\n       [ 1000.,    50.,   365.,   450.,  2050., 12000.],\n       [ 2000.,    40.,   365.,  3581.,  4631., 16271.],\n       [ 4000.,    50.,   365.,  5350.,  6500., 14400.]])"},"exec_count":51}},"pos":45,"start":1719371687757,"state":"done","type":"cell"}
{"end":1719371687772,"exec_count":52,"id":"ef481f","input":"array_1 = np.array([['id_1','Product A'],['id_2', 'Product B'],['id_3', 'Product C']])\narray_1[:,0] = np.chararray.strip(array_1[:,0], 'id_')\narray_1[:,1] = np.chararray.strip(array_1[:,1], 'Product ')\narray_1","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([['1', 'A'],\n       ['2', 'B'],\n       ['3', 'C']], dtype='<U9')"},"exec_count":52}},"pos":46,"start":1719371687770,"state":"done","type":"cell"}
{"end":1719371687780,"exec_count":53,"id":"807bd7","input":"array_1[:,1] = np.where(array_1[:,1] == 'A',\n                       1,\n                       array_1[:,1])\narray_1[:,1] = np.where(array_1[:,1] == 'B',\n                       2,\n                       array_1[:,1])\narray_1[:,1] = np.where(array_1[:,1] == 'C',\n                       3,\n                       array_1[:,1])","kernel":"python3","no_halt":true,"pos":47,"start":1719371687776,"state":"done","type":"cell"}
{"end":1719371687859,"exec_count":54,"id":"54e1e5","input":"array_1.astype(dtype = np.int64)","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[1, 1],\n       [2, 2],\n       [3, 3]])"},"exec_count":54}},"pos":48,"start":1719371687857,"state":"done","type":"cell"}
{"end":1719371687866,"exec_count":55,"id":"be73c6","input":"array_2 = np.array([[1,2,3,4,5],[3,4,5,6,7],[6,7,8,9,0],[2,5,7,9,1],[3,5,8,1,4]])\narray_3 = array_2 *2","kernel":"python3","no_halt":true,"pos":49,"start":1719371687863,"state":"done","type":"cell"}
{"end":1719371687874,"exec_count":56,"id":"273285","input":"array_2","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[1, 2, 3, 4, 5],\n       [3, 4, 5, 6, 7],\n       [6, 7, 8, 9, 0],\n       [2, 5, 7, 9, 1],\n       [3, 5, 8, 1, 4]])"},"exec_count":56}},"pos":50,"start":1719371687871,"state":"done","type":"cell"}
{"end":1719371687881,"exec_count":57,"id":"410aa5","input":"array_3","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[ 2,  4,  6,  8, 10],\n       [ 6,  8, 10, 12, 14],\n       [12, 14, 16, 18,  0],\n       [ 4, 10, 14, 18,  2],\n       [ 6, 10, 16,  2,  8]])"},"exec_count":57}},"pos":51,"start":1719371687879,"state":"done","type":"cell"}
{"end":1719371687963,"exec_count":58,"id":"96c89f","input":"np.stack((array_2, array_3), axis=1)","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[[ 1,  2,  3,  4,  5],\n        [ 2,  4,  6,  8, 10]],\n\n       [[ 3,  4,  5,  6,  7],\n        [ 6,  8, 10, 12, 14]],\n\n       [[ 6,  7,  8,  9,  0],\n        [12, 14, 16, 18,  0]],\n\n       [[ 2,  5,  7,  9,  1],\n        [ 4, 10, 14, 18,  2]],\n\n       [[ 3,  5,  8,  1,  4],\n        [ 6, 10, 16,  2,  8]]])"},"exec_count":58}},"pos":52,"start":1719371687955,"state":"done","type":"cell"}
{"end":1719371687971,"exec_count":59,"id":"85fc45","input":"np.stack((array_2, array_3), axis=1).shape","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"(5, 2, 5)"},"exec_count":59}},"pos":52.5,"start":1719371687968,"state":"done","type":"cell"}
{"end":1719371687982,"exec_count":60,"id":"d4b0cc","input":"np.dstack((array_2, array_3))","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[[ 1,  2],\n        [ 2,  4],\n        [ 3,  6],\n        [ 4,  8],\n        [ 5, 10]],\n\n       [[ 3,  6],\n        [ 4,  8],\n        [ 5, 10],\n        [ 6, 12],\n        [ 7, 14]],\n\n       [[ 6, 12],\n        [ 7, 14],\n        [ 8, 16],\n        [ 9, 18],\n        [ 0,  0]],\n\n       [[ 2,  4],\n        [ 5, 10],\n        [ 7, 14],\n        [ 9, 18],\n        [ 1,  2]],\n\n       [[ 3,  6],\n        [ 5, 10],\n        [ 8, 16],\n        [ 1,  2],\n        [ 4,  8]]])"},"exec_count":60}},"pos":53,"start":1719371687977,"state":"done","type":"cell"}
{"end":1719371688059,"exec_count":61,"id":"9c3eaa","input":"np.dstack((array_2, array_3))[:,0:2,0:2]","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[[ 1,  2],\n        [ 2,  4]],\n\n       [[ 3,  6],\n        [ 4,  8]],\n\n       [[ 6, 12],\n        [ 7, 14]],\n\n       [[ 2,  4],\n        [ 5, 10]],\n\n       [[ 3,  6],\n        [ 5, 10]]])"},"exec_count":61}},"pos":53.5,"start":1719371688056,"state":"done","type":"cell"}
{"end":1719371688068,"exec_count":62,"id":"46d4a6","input":"np.dstack((array_2, array_3)).shape","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"(5, 5, 2)"},"exec_count":62}},"pos":54,"start":1719371688064,"state":"done","type":"cell"}
{"end":1719371688081,"exec_count":63,"id":"23164b","input":"np.concatenate((array_2, array_3), axis = 1)","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([[ 1,  2,  3,  4,  5,  2,  4,  6,  8, 10],\n       [ 3,  4,  5,  6,  7,  6,  8, 10, 12, 14],\n       [ 6,  7,  8,  9,  0, 12, 14, 16, 18,  0],\n       [ 2,  5,  7,  9,  1,  4, 10, 14, 18,  2],\n       [ 3,  5,  8,  1,  4,  6, 10, 16,  2,  8]])"},"exec_count":63}},"pos":55,"start":1719371688076,"state":"done","type":"cell"}
{"end":1719371700892,"exec_count":66,"id":"3bffb2","input":"np.unique(array_2, return_counts=True)","kernel":"python3","output":{"0":{"data":{"text/plain":"(array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([1, 3, 2, 3, 3, 4, 2, 3, 2, 2]))"},"exec_count":66}},"pos":56,"start":1719371700889,"state":"done","type":"cell"}
{"end":1719371747015,"exec_count":67,"id":"e5971f","input":"array_2","kernel":"python3","output":{"0":{"data":{"text/plain":"array([[1, 2, 3, 4, 5],\n       [3, 4, 5, 6, 7],\n       [6, 7, 8, 9, 0],\n       [2, 5, 7, 9, 1],\n       [3, 5, 8, 1, 4]])"},"exec_count":67}},"pos":57,"start":1719371747011,"state":"done","type":"cell"}
{"end":1719371757833,"exec_count":68,"id":"61dfe9","input":"array_2.shape","kernel":"python3","output":{"0":{"data":{"text/plain":"(5, 5)"},"exec_count":68}},"pos":57.5,"start":1719371757824,"state":"done","type":"cell"}
{"end":1719371840568,"exec_count":70,"id":"2935d3","input":"array_check = np.array([[1,2,3],[4,5,6]])\narray_check","kernel":"python3","output":{"0":{"data":{"text/plain":"array([[1, 2, 3],\n       [4, 5, 6]])"},"exec_count":70}},"pos":58,"start":1719371840557,"state":"done","type":"cell"}
{"end":1719371974304,"exec_count":76,"id":"c23683","input":"np.reshape(array_check, (3,2))\n#np.transpose(array_check)","kernel":"python3","output":{"0":{"data":{"text/plain":"array([[1, 2],\n       [3, 4],\n       [5, 6]])"},"exec_count":76}},"pos":59,"start":1719371974300,"state":"done","type":"cell"}
{"end":1719406036955,"exec_count":3,"id":"4066e3","input":"import numpy as np\n\nFile_Name = 'Lending-company-Numeric.csv'\n\nraw_data = np.loadtxt(File_Name, \n          delimiter=',')\nprint(raw_data)","kernel":"python3","output":{"0":{"name":"stdout","text":"[[ 2000.    40.   365.  3121.  4241. 13621.]\n [ 2000.    40.   365.  3061.  4171. 15041.]\n [ 1000.    40.   365.  2160.  3280. 15340.]\n ...\n [ 2000.    40.   365.  4201.  5001. 16600.]\n [ 1000.    40.   365.  2080.  3320. 15600.]\n [ 2000.    40.   365.  4601.  4601. 16600.]]\n"}},"pos":0,"start":1719406036875,"state":"done","type":"cell"}
{"id":"e14361","input":"","pos":60,"type":"cell"}
{"id":0,"time":1719637201259,"type":"user"}
{"last_load":1719198751782,"type":"file"}